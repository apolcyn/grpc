<%def name="resolver_component_tests_runner(tests, health_check_record_name, health_check_record_data)">
if [[ "$GRPC_DNS_RESOLVER" != "" && "$GRPC_DNS_RESOLVER" != ares ]]; then
  echo "This test only works under GRPC_DNS_RESOLVER=ares. Have GRPC_DNS_RESOLVER=$GRPC_DNS_RESOLVER" && exit 1
fi
export GRPC_DNS_RESOLVER=ares

# Health check local DNS server TCP and UDP ports
for ((i=0;i<30;i++));
do
  echo "Retry health-check DNS query to local DNS server over tcp and udp"
  RETRY=0
  dig A ${health_check_record_name} @localhost -p "$FLAGS_test_dns_server_port" +tries=1 +timeout=1 | grep ${health_check_record_data} || RETRY=1
  dig A ${health_check_record_name} @localhost -p "$FLAGS_test_dns_server_port" +tries=1 +timeout=1 +tcp | grep ${health_check_record_data} || RETRY=1
  if [[ "$RETRY" == 0 ]]; then
    break
  fi;
  sleep 0.1
done

if [[ $RETRY == 1 ]]; then
  echo "FAILED TO START LOCAL DNS SERVER"
  kill -SIGTERM $DNS_SERVER_PID
  wait
  exit 1
fi

function terminate_all {
  echo "Received signal. Terminating $! and $DNS_SERVER_PID"
  kill -SIGTERM $! || true
  kill -SIGTERM $DNS_SERVER_PID || true
  wait
  exit 1
}

trap terminate_all SIGTERM SIGINT

EXIT_CODE=0
# TODO: this test should check for GCE residency and skip tests using _grpclb._tcp.* SRV records once GCE residency checks are made
# in the resolver.

% for test in tests:
$FLAGS_test_bin_path \\

  --target_name='${test['target_name']}' \\

  --expected_addrs='${test['expected_addrs']}' \\

  --expected_chosen_service_config='${test['expected_chosen_service_config']}' \\

  --expected_lb_policy='${test['expected_lb_policy']}' \\

  --local_dns_server_address=127.0.0.1:$FLAGS_test_dns_server_port &
wait $! || EXIT_CODE=1

% endfor
kill -SIGTERM $DNS_SERVER_PID || true
wait
exit $EXIT_CODE</%def>
